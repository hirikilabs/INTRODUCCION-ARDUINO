FITXA 1: Arduino Hastapenak. Oinarrizko proramazioa.
1.	Arduino zer da?
Arduino open-hardware platarforma da,  sarrera eta irteera (E/S), analogiko eta digitaletan, oinarrituta dagoen plaka da, Processing hizkuntza garapenerako ingurune batean erabilita. Open-hardware bai diseinuan zein fabrikazioa doakoa da. Hau da, edozein lizentzia erosi gabe libreki edozein proiektu garatzeko erabili daiteke.  Gainera, bere sinpletasun eta kostu txikia, bere ikaskuntza eta hastapen elektronika digital mundura elementu gisa erabiltzeko gomendagarria bihurtzen da.  
 
2.	Arduino Softwarerra ezagutzen
Arduinoa abiarazteko jarraitu beharreko pausoak
1.	Arduino programa irekitzeko, Arduino karpetan sartuko gara eta bertan   ikonoa bilatuko dugu, bertan klikatuz
2.	Behin ireki dugunean,  kodea idatziko dugun pantaila agertuko da:
  

	 
	  

	                                              Gorde
	                                     Ireki
	                            Berria
	         Plakan kargatu
	Compilatu
	
	

3.	Arduino plaka konektatuta dagoen USB tokia egokitu. Tools > Serial Port > COM (aukeratu eskaintzen duen aukera)
 

4.	Aukeratu lan egingo dugun Arduino plaka, gure kasuan Arduino Uno izango da.
Tools > Board > Arduino Uno 

 
5.	Programa kargatu. Behin gure plakaren zehaztapenak konfiguratu ditugula eta kodea idatzita, plakari kargatuko diogu.
 
Karga bukatzerakoan, Karga burutu den mezua agertuko da. Horrela ez bada, kodeak akatsaren bat duela abisatuko dizu programak berak eta era berean konponbidea bilatzen lagunduko dizu ohar bidez. 
 
3.	Oinarrizko programazioa
Lehenengo saio honeta, 80ko hamarkadara itzuliko gara programazio sekuentziala eta E/S plakaren programazio teknika ikasteko, Kotxe Fantastikoa adibide interesgarri gisa erabiliz. Autoak bere aurreko muturrean, argi efektu joko karakteristikoa egiten zituen tamaina guztiko LED argiak zituen. 
Gure simulazioan ShieldBoard plakan konektatuta dauden  4 LED bere (220Ohm erresistentziak berne dituztela) erabiliko ditugu gure sekuentziekin jolasteko. 
 
Erakutsiko dugun lehenengo kodean, LED guztiak aldi berean piztu eta itzaliko dira definituko diogun denbora pasa eta gero, digitalWrite (pinNum, HIGH/LOW) eta delay(time) erabiliz. Bigarren adibidean, LEDz LED piztu eta itzaltzen den sekuentzia egingo dugu. Azken adibidean, pultsadore bat sartuko dugu, non argi bat kliskatzen egongo da pultsadoreari eman arte. Behin sakatuta, argi horrek finko geratuko da eta ondorengoa kliskatzen hasiko da. 
•	Saioaren helburua: LED argiaz osatutako adibide jokoak egingo dira. Horretarako, ShieldBoard erabiliko da sarrera gisa, Arduinok aurkezten dituen aukeren artean, kableekin zirkuituak eraikitzen hasi aurretik. 
•	Helburu didaktikoa: Arduino ikasketa lehengo saio honetan ikasleak kodeak Arduino plakan nola  kargatu egiten den ikasi beharko du eta LED argiak jarraituko duen sekuentziaz jabetu  segun kodeak jasotzen duen moduan. 
•	Beharrezko materiala:
-	Arduino Uno plaka
-	ShieldBoard 
-	USB kablea
-	Pultsadorea
 
Adibidea 1 bilatu
Gure kotxe fantastikoak aldi berean 4 LED argi piztean datza aldi berean. LED argiak ShieldBoard-en  11,10,9 eta 6 pinak egokituta dauzka. Argi guztiak 1000 milisegundu (segundo bat) denbora pasa ostean piztu-itzali sekuentzia burutu beharko du.  

Konexiorako planoa	 
	
Breadboard gaineko eskema	 

 
PROGRAMAZIO KODEA	// Argi jokoa 1 – Kotxe fantastikoa
//  "//" komentateko lerroak dira, programa kaltetzen ez dituztenak
// Has gaitezen programa aztertzen. Lehendabizi, aldagaiak (aldagai globalak) definituko ditugu. Aldagai hauek 
// LED argiak izango dira eta algaezin egingo ditugu “const” erabiliz.   
 
  const int ROJO = 11;      //  [KOLOREA]  [x]-ri egokitzen diogu, kokatuta dagoen pinarekin harremana duena
  const int AMBAR = 10;         
  const int VERDE = 9;
  const int BLANCO = 6;

// Programaren zati oinarrizkoena. Funtzioa bloke batek lan bat egiten duena da. 
//setup() programa hasieran behin bakarrik erabiltzen den funtzioa da. Gero ez da berriz erabiltzen 
    
void setup()
    {
    pinMode(ROJO, OUTPUT);           // pinMode pin bat sarrera edo irteera moduan definitzen duen funtzioa da.                                                          
    pinMode(AMBAR, OUTPUT);     // pinMode(zein pinaren gainean aritu nahi dugun, INPUT (sarrera)/OUTPUT
    pinMode(VERDE, OUTPUT);       //(irteera)
    pinMode(BLANCO, OUTPUT);
    }
    
// loop() etengabe aritzen den funtzioa da, plaka deskonektatu arte edo reset eman arte

 void loop()
    {
    int Tiempo = 1000;     // Zenbat denboraz aritu nahi den hurrengo etapara pasa arte definitzen da. 
      
      digitalWrite(ROJO, HIGH);      //digitalWriten, pinMode-a irakurri eta korrontea igarotzen da (HIGH) 
      digitalWrite(AMBAR, HIGH);
      digitalWrite(VERDE, HIGH);
      digitalWrite(BLANCO, HIGH);
      delay(Tiempo);    // denbora aldagaia gauzatze egoera.
      digitalWrite(ROJO, LOW);     // korrontea moztu egiten (LOW) bide horretan
      digitalWrite(AMBAR, LOW);
      digitalWrite(VERDE, LOW);
      digitalWrite(BLANCO, LOW);
      delay(Tiempo);
    }


 
Adibidea 2
Aurreko egitura berdina mantenduz, sekuentzia bat jarraituz piztu eta itzali 4 LED argiak. 
PROGRAMAZIO KODEA	// Argi jokoa 2 – Kotxe fantastikoa – piztu/itzali sekuentziala

// LED argiak izango dira eta algaezin egingo ditugu “const” erabiliz.   
 const int ROJO = 11;        //pin-ak non dauden konektatuta zehazten du.
 const int AMBAR = 10;         
 const int VERDE = 9;
 const int BLANCO = 6; 

// setup() hasieran bakarrik gauzatzen den funtzioa da.
 void setup()
    {
pinMode(ROJO, OUTPUT);               // pinMode pin bat sarrera edo irteera moduan definitzen duen funtzioa da.                                                          
pinMode(AMBAR, OUTPUT);     // pinMode(zein pinaren gainean aritu nahi dugun, INPUT (sarrera)/OUTPUT
pinMode(VERDE, OUTPUT);       //(irteera)
 pinMode(BLANCO, OUTPUT);
    }
    
 void loop()
    {
      int Tiempo = 250;   // Hurrengo aldagai ekintza zehazten duen denbora da. 
 
      digitalWrite(ROJO, HIGH);   //digitalWriten, pinMode-a irakurri eta korrontea igarotzen da (HIGH)
      delay(Tiempo);                // denbora algaia hurrengo egoerara pasa arte. 
      digitalWrite(AMBAR, HIGH);
      delay(Tiempo);
      digitalWrite(VERDE, HIGH);
      delay(Tiempo);
      digitalWrite(BLANCO, HIGH);
      delay(Tiempo);
      digitalWrite(BLANCO, LOW); // korrontea moztu egiten (LOW) bide horretan      
      delay(Tiempo);
      digitalWrite(VERDE, LOW);
      delay(Tiempo);
      digitalWrite(AMBAR, LOW);
      delay(Tiempo);
      digitalWrite(ROJO, LOW);
      delay(Tiempo);
    
    }

 
Adibidea 3
Adibide honetan, sarrera aldagai berri bat sartuko dugu (INPUT) LED argiak aktibatzen gaitasuna izango duena. Gure kotxeak alerta-egoera batean egon dadin, LED argi bat beti kliskatuta egongo da pultsadorea sakatu ez den bitartean. Behin etengailua sakatuta, kliska egiten zegoen argia guztiz piztuko da bere ondorengoa kliska egoera jartzen den bitartean, berriz ere pultsadorea sakatu arte.  
Konexiorako planoa	 
	
Breadboard gaineko eskema	 
ProNasdasdasd	// Argi jokoa 3  - Kotxe fantastikoa – argia kliskatu egoera batean mantendu pultsarea sakatu arte, fijo
// gelditu arte, ondorengoa kliskatu egoera hasten den einean. 

// LED argiak izango dira eta algaezin egingo ditugu “const” erabiliz.   
 const int ROJO = 11;      
 const int AMBAR = 10;         
 const int VERDE = 9;
 const int BLANCO = 6;
 const int PULSADOR = 12;
    
  
    void setup()
    {
    pinMode(ROJO, OUTPUT);          // pinMode pin bat sarrera edo irteera moduan definitzen duen funtzioa da.                                                          
    pinMode(AMBAR, OUTPUT);    // pinMode(zein pinaren gainean aritu nahi dugun, INPUT (sarrera)/OUTPUT
    pinMode(VERDE, OUTPUT);       // (irteera)
    pinMode(BLANCO, OUTPUT);
    pinMode(PULSADOR, INPUT);
    } 
    
    void loop()
     
    {
      int Pulso; 
      int Veces=0;               // Erabiliko ditugun aldagaiak
      int Vuelta = 300;          // klikatu denbora definitu
      
      digitalWrite(ROJO, LOW);   // Lehendabizi LED argi guztiak itzalita utziko ditugu. 
      digitalWrite(AMBAR, LOW);
      digitalWrite(VERDE, LOW);
      digitalWrite(BLANCO, LOW);
      delay(10);
      
      
     
      while(Veces < 5)         //  while funtzioa Veces <5 aginpean burutu egingo den sekuentzia da.   
                                            //”Veces” pultsadoreak zenbat aldiz sakatu den hartzen du 
      {
        Pulso = digitalRead(PULSADOR);  // Aurrekoaren verdina, baina  “Pulso” aldagaia sortu da non 
                                                                    //guardar el valor leido del pulsador 2.
        if (Pulso == HIGH)                  //  Bigarren pultsagailua sakatu ezkero… 
          {Veces = Veces + 1;}           //  "Veces" aldagaiari 1 gehituko diogu. Lehenengo aldian    
                                                        // "Veces = 0 + 1" egingo du.  Bigarrenean “Veces” 1 izango da, orduan 
                                                        // "Veces = 1 + 1" egitean “Veces” 2 izango da.
       // Baina… Noiz bukatuko da “While” funtzioa? "Veces" 5 baino txikiagoa ez denean gertatuko da 
       //(adibidez “Veces” = 5, 6…). Hau gertatu ezkero, “While” funtzioaren barnean dagoen programa 
       //ez da irakurriko.
      
       // "switch" eta "if" antzekoak dira, baino “switch” kasu gehiago hartzen ditu. Parentesisan dagoen
      // aldagaia izango da kasua erabakitzeko balioa. Hau da, “Veces” 0 baldin bada, “Case 0:” irakurriko du.
      // “Veces”-ren balioa izango da kasua, “While”-aren baldintza gezurra izan arte. 

                                        
       
        


  switch(Veces)                               
           {                        
           case 0:                              
               delay(Vuelta);
           break;
           
           case 1:
               digitalWrite(ROJO, HIGH);    // Piztu eta itzaltzeko kodea (kliska), “Vuelta” denbora  igarotuz.
               delay(Vuelta);
               digitalWrite(ROJO, LOW);
               delay(Vuelta);
            break;
           
            case 2: 
               digitalWrite(ROJO, HIGH);    // LED Gorria piztuta utziko du eta  ambarra kliska egingo du. 
               digitalWrite(AMBAR, HIGH);
               delay(Vuelta);
               digitalWrite(AMBAR, LOW);
               delay(Vuelta);
            break;
            
            case 3:
               digitalWrite(ROJO, HIGH);   // LED Gorria eta ambarra piztuta egongo dira eta verdea kliska egingo du.
               digitalWrite(AMBAR, HIGH);
               digitalWrite(VERDE, HIGH);
               delay(Vuelta);
               digitalWrite(VERDE, LOW);
               delay(Vuelta);
            break;
            
            case 4: 
               digitalWrite(ROJO, HIGH);   // Zuria kliska egingo du eta besteak piztuta egongo dira.
               digitalWrite(AMBAR, HIGH);
               digitalWrite(VERDE, HIGH);
               digitalWrite(BLANCO, HIGH);
               delay(Vuelta);
               digitalWrite(BLANCO, LOW);
               delay(Vuelta);
            break; 
            }
           }
      delay(Vuelta);        // Atseden denbora 
      }
